module graph[node]
open relation

-- функция получения всех узлов графа
fun nodes[r: node->node]: set node {
  r.domain+ r.codomain
}
-- граф связан, то есть из любой вершины
-- можно добраться до любой по рёбрам
-- без учёта направленности
pred connected[r: node->node] {
  all n1,n2 : r.nodes | n1 in n2.*(r + ~r)
}
-- граф ацикличный и направленный
pred dag [r: node->node] {
  r.acyclic[r.nodes]
}
-- получить все коневые вершины
-- корневая вершина та, в которую нет
-- никаких входящих путей
fun roots [r: node->node] : set node {
  let ns = r.nodes | -- ns - все узлы графа
    ns - ns.^r -- из всех узлов убираем те,
                          -- в которые есть какой-либо
                          -- входящий путь
}
-- получить все листья
-- лист - конечный узел из которого
-- нет исходящих путей
fun leaves [r: node->node] : set node {
  let ns = r.nodes | -- ns - все узлы графа
    ns - ns.^~r -- из всех узлов убираем те,
                                         -- из которых есть какой-либо
                                         -- исходящий путь
}
